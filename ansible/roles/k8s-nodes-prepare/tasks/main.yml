---
# tasks file for k8s-nodes-prepare

# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports
# Открываем нужные порты
- name: Ensure firewalld is running
  service:
    name: firewalld
    state: started
    enabled: yes

- name: Open individual ports on master-node
  ansible.builtin.firewalld:
    port: "{{ item }}/tcp"
    state: enabled
    permanent: true
    immediate: yes
  loop: "{{ master_node_open_ports_required.individual_ports }}"

- name: Open individual ports on worker-node
  ansible.builtin.firewalld:
    port: "{{ item }}/tcp"
    state: enabled
    permanent: true
    immediate: yes
  loop: "{{ worker_node_open_ports_required.individual_ports }}"

- name: Open port ranges
  ansible.builtin.firewalld:
    port: "{{ item.start }}-{{ item.end }}/tcp"
    state: enabled
    permanent: true
    immediate: yes
  loop: "{{ worker_node_open_ports_required.port_ranges }}"

# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#before-you-begin
# Отключаем свап
- name: Turn off swap
  ansible.builtin.command: swapoff -a
  ignore_errors: true

# https://kubernetes.io/docs/setup/production-environment/container-runtimes/#forwarding-ipv4-and-letting-iptables-see-bridged-traffic
# Forwarding IPv4 and letting iptables see bridged traffic

- name: Ensure overlay and br_netfilter modules are loaded at boot
  copy:
    dest: "/etc/modules-load.d/k8s.conf"
    content: |
      overlay
      br_netfilter
    owner: root
    group: root
    mode: '0644'

- name: Load overlay module immediately
  modprobe:
    name: overlay
    state: present

- name: Load br_netfilter module immediately
  modprobe:
    name: br_netfilter
    state: present

- name: Set sysctl parameters for Kubernetes
  copy:
    dest: "/etc/sysctl.d/k8s.conf"
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
    owner: root
    group: root
    mode: '0644'

- name: Apply sysctl params without reboot
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
    reload: yes
  loop:
    - { name: "net.bridge.bridge-nf-call-iptables", value: "1" }
    - { name: "net.bridge.bridge-nf-call-ip6tables", value: "1" }
    - { name: "net.ipv4.ip_forward", value: "1" }

#https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#installing-runtime
# ставим containerd

- name: Install dnf-utils
  ansible.builtin.dnf:
    name: dnf-utils
    state: present

- name: Add Docker CE repository
  ansible.builtin.command: dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

- name: Delete podman and buildah
  ansible.builtin.dnf:
    name:
      - podman
      - buildah
    state: absent

- name: Install all Docker packeges
  ansible.builtin.dnf:
    name: "{{ item.name }}"
    state: present
  loop: "{{ docker_required_packeges }}"

- name: Create default containerd configuration file
  ansible.builtin.shell: |
    containerd config default > /etc/containerd/config.toml
  args:
    creates: /etc/containerd/config.toml

- name: Restart containerd to apply the configuration
  ansible.builtin.service:
    name: containerd
    state: restarted
    enabled: yes

- name: Set systemd as the cgroup driver for containerd
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    regexp: '^          SystemdCgroup = false'
    line: '          SystemdCgroup = true'
    backrefs: yes
  notify: restart containerd

- name: Set sysctl parameters for Kubernetes
  copy:
    dest: "/etc/yum.repos.d/kubernetes.repo"
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
    owner: root
    group: root
    mode: '0644'

- name: Create Kubernetes repo file
  ansible.builtin.copy:
    dest: /etc/yum.repos.d/kubernetes.repo
    owner: root
    group: root
    mode: '0644'
    content: |
      [kubernetes]
      name=Kubernetes
      baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
      enabled=1
      gpgcheck=1
      gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
      exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni

- name: Install all Kubernetes packeges
  ansible.builtin.dnf:
    name: "{{ item.name }}"
    state: present
    disable_excludes: kubernetes
  loop: "{{ k8s_required_packeges }}"

- name: Ensure kubelet service is enabled and running
  ansible.builtin.systemd:
    name: kubelet
    enabled: yes
    state: started
