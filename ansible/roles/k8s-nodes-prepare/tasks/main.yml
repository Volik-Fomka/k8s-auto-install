---
# tasks file for k8s-nodes-prepare

# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports
# Открываем нужные порты
- name: Ensure firewalld is running
  ansible.builtin.service:
    name: firewalld
    state: started
    enabled: true

- name: Open individual ports on master-node
  ansible.posix.firewalld:
    port: "{{ item }}/tcp"
    state: enabled
    permanent: true
    immediate: true
  loop: "{{ master_node_open_ports_required.individual_ports }}"

- name: Open individual ports on worker-node
  ansible.posix.firewalld:
    port: "{{ item }}/tcp"
    state: enabled
    permanent: true
    immediate: true
  loop: "{{ worker_node_open_ports_required.individual_ports }}"

- name: Open port ranges
  ansible.posix.firewalld:
    port: "{{ item.start }}-{{ item.end }}/tcp"
    state: enabled
    permanent: true
    immediate: true
  loop: "{{ worker_node_open_ports_required.port_ranges }}"

# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#before-you-begin
# Отключаем свап
- name: Turn off swap
  ansible.builtin.command: swapoff -a
  ignore_errors: true
  register: ignore_errors_register
  changed_when: ignore_errors_register.rc == 0

# https://kubernetes.io/docs/setup/production-environment/container-runtimes/#forwarding-ipv4-and-letting-iptables-see-bridged-traffic
# Forwarding IPv4 and letting iptables see bridged traffic

- name: Ensure overlay and br_netfilter modules are loaded at boot
  ansible.builtin.copy:
    dest: "/etc/modules-load.d/k8s.conf"
    content: |
      overlay
      br_netfilter
    owner: root
    group: root
    mode: '0644'

- name: Load overlay module immediately
  community.general.modprobe:
    name: overlay
    state: present

- name: Load br_netfilter module immediately
  community.general.modprobe:
    name: br_netfilter
    state: present

- name: Set sysctl parameters for Kubernetes
  ansible.builtin.copy:
    dest: "/etc/sysctl.d/k8s.conf"
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
    owner: root
    group: root
    mode: '0644'

- name: Apply sysctl params without reboot
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: true
    state: present
    reload: true
  loop:
    - { name: "net.bridge.bridge-nf-call-iptables", value: "1" }
    - { name: "net.bridge.bridge-nf-call-ip6tables", value: "1" }
    - { name: "net.ipv4.ip_forward", value: "1" }

# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#installing-runtime
# ставим containerd

- name: Delete podman and buildah
  ansible.builtin.dnf:
    name:
      - podman
      - buildah
    state: absent

# https://github.com/containerd/containerd/blob/main/docs/getting-started.md

- name: Installing containerd from the official binaries
  ansible.builtin.unarchive:
    src: https://github.com/containerd/containerd/releases/download/v1.7.15/containerd-1.7.15-linux-amd64.tar.gz
    dest: /usr/local
    remote_src: true

- name: Create containerd systemd unit
  ansible.builtin.template:
    src: containerd.service.j2
    dest: /etc/systemd/system/containerd.service
    owner: root
    group: root
    mode: '0644'

- name: Reload systemd to recognize the new containerd service
  ansible.builtin.systemd:
    daemon_reload: true

- name: Enable and start containerd service
  ansible.builtin.systemd:
    name: containerd
    enabled: true
    state: started

- name: Download runc from the official binaries
  ansible.builtin.get_url:
    url: "https://github.com/opencontainers/runc/releases/download/v1.1.12/runc.amd64"
    dest: "/tmp/runc.amd64"
    mode: '0755'

- name: Install runc binary
  ansible.builtin.copy:
    src: "/tmp/runc.amd64"
    dest: "/usr/local/sbin/runc"
    remote_src: true
    mode: '0755'

- name: Create a directory /opt/cni/bin
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory
    mode: '0755'

- name: Installing CNI plugins
  ansible.builtin.unarchive:
    src: https://github.com/containernetworking/plugins/releases/download/v1.4.1/cni-plugins-linux-amd64-v1.4.1.tgz
    dest: /opt/cni/bin
    remote_src: true

- name: Create a directory /etc/containerd
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Create default containerd configuration file
  ansible.builtin.shell: |
    /usr/local/bin/containerd config default | tee /etc/containerd/config.toml > /dev/null
  args:
    creates: /etc/containerd/config.toml

- name: Restart containerd to apply the configuration
  ansible.builtin.service:
    name: containerd
    state: restarted
    enabled: true

- name: Set systemd as the cgroup driver for containerd
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    regexp: '^\s*SystemdCgroup\s*='
    line: '            SystemdCgroup = true'
  notify: Restart containerd

- name: Set systemd as the cgroup driver for containerd
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    regexp: '^    sandbox_image = "registry.k8s.io/pause:3.8"'
    line: '    sandbox_image = "registry.k8s.io/pause:3.9"'
  notify: Restart containerd

- name: Set sysctl parameters for Kubernetes
  ansible.builtin.copy:
    dest: "/etc/yum.repos.d/kubernetes.repo"
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
    owner: root
    group: root
    mode: '0644'

- name: Create Kubernetes repo file
  ansible.builtin.copy:
    dest: /etc/yum.repos.d/kubernetes.repo
    owner: root
    group: root
    mode: '0644'
    content: |
      [kubernetes]
      name=Kubernetes
      baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
      enabled=1
      gpgcheck=1
      gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
      exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni

- name: Install all Kubernetes packeges
  ansible.builtin.dnf:
    name: "{{ item.name }}"
    state: present
    disable_excludes: kubernetes
  loop: "{{ k8s_required_packeges }}"

- name: Ensure kubelet service is enabled and running
  ansible.builtin.systemd:
    name: kubelet
    enabled: true
    state: started
